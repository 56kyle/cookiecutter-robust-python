# .github/workflows/build-package-rust.yml
# See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Build Rust Package (Optional)

# This workflow is only generated if the 'Add Rust extension' option is selected.
# It's triggered when Rust source code or build configuration changes.

on:
  pull_request:
    paths:
      - 'rust/**' # Rust source code and Cargo.toml
      - 'noxfile.py' # Build task config
      - 'pyproject.toml' # Packaging config (includes Maturin backend)
      - '.github/workflows/build-package-rust.yml' # This workflow file
  push:
    branches:
      - main
    paths:
      - 'rust/**'
      - 'noxfile.py'
      - 'pyproject.toml'
      - '.github/workflows/build-package-rust.yml'

  workflow_dispatch:

jobs:
  build-rust-package:
    name: Run Rust Package Build on {% raw %}${{ matrix.os }}/{{"{{"}} matrix.python-version{{"}}"}} {% endraw %}
    # Building Rust extensions must be verified across OSs and often relevant Python versions
    # (due to linking/ABI compatibility)
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      # Build using supported Python versions, across OSs to check native compilation compatibility.
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"] # Python versions the Rust wheel should be compatible with
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false # Don't cancel all jobs if one matrix entry fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain (Maturin needs this).
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install uv and set up Python
        # Set up uv and the matrix Python version. Maturin needs a Python interpreter
        # to build against.
        uses: astral-sh/setup-uv@v6
        with:
          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}

      # Note: nox and maturin/build deps are provisioned by uvx below.

      - name: Run Rust package build
        # Calls nox -s build-rust (or a unified build session)
        # This Nox session runs uv build, configured for Maturin backend.
        run: uvx nox -s build-package # Assuming nox -s build-package handles Maturin correctly based on pyproject.toml

      # Upload built artifacts (platform-specific wheels and sdist)
      # These are needed later for CD (publishing). Upload artifacts explicitly here.
      - name: Upload built packages artifact
        uses: actions/upload-artifact@v4
        if: always() # Always upload even on build failure for inspection
        with:
          # Native wheels are OS/Arch specific. Name artifact accordingly.
          name: distribution-packages-{% raw %}${{ matrix.os }}{% endraw %}-{% raw %}${{ runner.arch }}{% endraw %}
          path: dist/
          retention-days: 7
